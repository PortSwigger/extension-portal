name: Allow Issue Creator to Reopen

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

jobs:
  reopen-issue:
    if: github.event.issue.state == 'closed'
    runs-on: ubuntu-latest
    outputs:
      zoom_payload: ${{ steps.prepare_payload.outputs.payload }}
      should_notify: ${{ steps.prepare_payload.outputs.should_notify }}

    steps:
      - name: Check if comment is a reopen request
        id: check_comment
        run: |
          COMMENT="${{ github.event.comment.body }}"
          COMMENT_TRIMMED=$(echo "$COMMENT" | xargs)

          if [[ "$COMMENT_TRIMMED" == "/reopen" ]]; then
            echo "is_reopen_request=true" >> $GITHUB_OUTPUT
          else
            echo "is_reopen_request=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if commenter is issue creator
        id: check_creator
        if: steps.check_comment.outputs.is_reopen_request == 'true'
        run: |
          ISSUE_CREATOR="${{ github.event.issue.user.login }}"
          COMMENTER="${{ github.event.comment.user.login }}"

          if [[ "$ISSUE_CREATOR" == "$COMMENTER" ]]; then
            echo "is_creator=true" >> $GITHUB_OUTPUT
          else
            echo "is_creator=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if issue is archived
        id: check_archived
        if: steps.check_comment.outputs.is_reopen_request == 'true' && steps.check_creator.outputs.is_creator == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const issueNumber = context.issue.number;
              const projectNumber = 1; // Extension submissions project number

              // Get issue node ID
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });

              const issueNodeId = issue.node_id;

              // Check if issue is on the project board
              const checkQuery = `
                query($issueId: ID!) {
                  node(id: $issueId) {
                    ... on Issue {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            ... on ProjectV2 {
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const checkResult = await github.graphql(checkQuery, {
                issueId: issueNodeId
              });

              const isOnProject = checkResult.node.projectItems.nodes.some(
                item => item.project.number === projectNumber
              );

              if (!isOnProject) {
                core.info('Issue not found on project board - appears to be archived');
                core.setOutput('is_archived', 'true');
              } else {
                core.info('Issue is on the project board');
                core.setOutput('is_archived', 'false');
              }
            } catch (error) {
              core.warning(`Unable to check project status: ${error.message}`);
              core.setOutput('is_archived', 'unknown');
            }

      - name: Prepare Zoom notification payload
        id: prepare_payload
        if: steps.check_comment.outputs.is_reopen_request == 'true' && steps.check_creator.outputs.is_creator == 'true' && steps.check_archived.outputs.is_archived == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const issueTitle = context.payload.issue.title;
            const issueUrl = context.payload.issue.html_url;
            const requester = context.payload.comment.user.login;

            const payload = {
              "Alert": "Archived Issue Reopen Request",
              "Issue": `#${issueNumber}: ${issueTitle}`,
              "Requested by": requester,
              "Action Required": "Manually restore issue to project board, then reopen",
              "URL": issueUrl
            };

            core.setOutput('payload', JSON.stringify(payload));
            core.setOutput('should_notify', 'true');

      - name: Comment on archived issue
        if: steps.check_comment.outputs.is_reopen_request == 'true' && steps.check_creator.outputs.is_creator == 'true' && steps.check_archived.outputs.is_archived == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const message = [
              '⚠️ This issue appears to be archived and has been removed from the project board.',
              '',
              'Our team has been notified and will manually restore it before reopening.',
              '',
              'Please allow some time for this to be processed.'
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

      - name: Reopen issue
        if: steps.check_comment.outputs.is_reopen_request == 'true' && steps.check_creator.outputs.is_creator == 'true' && steps.check_archived.outputs.is_archived != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'open'
            });

            core.info('Issue reopened successfully');

      - name: Notify non-creator
        if: steps.check_comment.outputs.is_reopen_request == 'true' && steps.check_creator.outputs.is_creator == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ Only the original issue creator can reopen this issue using the `/reopen` command. Please ask a maintainer for assistance or create a new issue if needed.'
            });

  notify-zoom:
    needs: reopen-issue
    if: needs.reopen-issue.outputs.should_notify == 'true'
    uses: ./.github/workflows/common/notify-zoom.yml
    with:
      payload: ${{ needs.reopen-issue.outputs.zoom_payload }}
    secrets:
      ZOOM_WEBHOOK_URL: ${{ secrets.ZOOM_WEBHOOK_URL }}
      ZOOM_VERIFICATION_TOKEN: ${{ secrets.ZOOM_VERIFICATION_TOKEN }}
